name: CI/CD Pipeline

on:
  push:
    branches:
      - "**"
      - "!main"

jobs:
  lint:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry config virtualenvs.create false
          poetry install --no-interaction --no-root --with dev,lint

      - name: Run linters
        run: |
          black --check app tests
          isort --check app tests
          flake8 app tests

      - name: Run mypy
        run: |
          mypy app

  test:
    name: Run Tests with Docker
    runs-on: ubuntu-latest
    needs: lint
    env:
      TEST_DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/smartpay_test
      TEST_ADMIN_DSN: postgresql://postgres:postgres@localhost:5432/postgres

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install Poetry and dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry config virtualenvs.create false
          poetry install --no-interaction --no-root --with dev
          pip install coverage

      - name: Copy .env file for testing
        run: cp .env.example .env

      - name: Wait for PostgreSQL and Create Test Database
        run: |
          until pg_isready -h localhost -U postgres; do echo "Waiting for postgres..."; sleep 2; done
          PGPASSWORD=postgres psql -h localhost -U postgres -c "DROP DATABASE IF EXISTS smartpay_test;"
          PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE smartpay_test;"
          PGPASSWORD=postgres psql -h localhost -U postgres -c "GRANT ALL PRIVILEGES ON DATABASE smartpay_test TO postgres;"

      - name: Run tests and enforce 60% coverage
        run: |
          poetry run pytest --cov=app --cov-report=xml --cov-fail-under=60

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage.xml
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
          override_branch: main

      - name: Notify Telegram ‚Äì Success
        if: success()
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="‚úÖ *SmartPay CI passed*\nBranch: \`${{ github.ref_name }}\`\nüîó [View Run]($GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID)" \
            -d parse_mode=Markdown

      - name: Notify Telegram ‚Äì Failure
        if: failure()
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="‚ùå *SmartPay CI failed*\nBranch: \`${{ github.ref_name }}\`\nüîó [View Run]($GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID)" \
            -d parse_mode=Markdown
